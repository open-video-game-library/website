import { hash } from "ohash";
import { useCookie } from "#app";
import { jsonStringify } from "../utils/json.mjs";
import { addPrerenderPath, shouldUseClientDB, withContentBase } from "./utils.mjs";
export const fetchContentNavigation = async (queryBuilder) => {
  let params = queryBuilder;
  if (typeof params?.params === "function") {
    params = params.params();
  }
  const apiPath = withContentBase(params ? `/navigation/${hash(params)}.json` : "/navigation");
  if (!process.dev && process.server) {
    addPrerenderPath(apiPath);
  }
  if (shouldUseClientDB()) {
    const generateNavigation = await import("./client-db").then((m) => m.generateNavigation);
    return generateNavigation(params || {});
  }
  const data = await $fetch(apiPath, {
    method: "GET",
    responseType: "json",
    params: {
      _params: jsonStringify(params || {}),
      previewToken: useCookie("previewToken").value
    }
  });
  if (typeof data === "string" && data.startsWith("<!DOCTYPE html>")) {
    throw new Error("Not found");
  }
  return data;
};
